////
/// @group Settings: Global
/// @author Mike Mai
////

@import '../settings-colors/settings-colors';
@import '../../02-tools/tools-color-palette/tools-color-palette';

@import '../settings-opacity/settings-opacity';
@import '../../02-tools/tools-opacity/tools-opacity';

/* ------------------------------------ *\
   Global Settings
\* ------------------------------------ */

// Global Min / Max Base Font Size
/// Global Default Min Base Font Size
$bolt-base-font-size--min: 15px !default;
/// Global Default Max Base Font Size
$bolt-base-font-size--max: 18px !default;

// Async font loading classes.
/// Async Default font subset loaded class.
$bolt-fonts--subset-loaded-class: 'js-fonts-subset-loaded' !default;
/// Async Default font loaded class.
$bolt-fonts--loaded-class: 'js-fonts-loaded' !default;

// @todo Salem, we should probably deprecate these so there is only one way to do shadows
// Shadows
/// Bolt shadow color
$bolt-shadow-color: bolt-color(black) !default;
/// Bolt small shadow
$bolt-shadow--small: 0 2px 0.15rem rgba($bolt-shadow-color, 0.3) !default;
/// Bolt medium shadow
$bolt-shadow--medium: 0 0.15rem 0.3rem rgba($bolt-shadow-color, 0.35) !default;
/// Bolt large shadow
$bolt-shadow--large: 0 0.35rem 0.6rem rgba($bolt-shadow-color, 0.18) !default;

// Border
/// Bolt border width
$bolt-border-width: 1px !default;
/// Bolt border style
$bolt-border-style: solid !default;
/// Bolt border color
$bolt-border-color: rgba(bolt-color(gray), 0.2) !default;
/// Bolt border radius
$bolt-border-radius: 3px !default;

// Transition
/// Bolt transition
$bolt-transition: ease-in-out 200ms !default;
/// Bolt transition ease
$bolt-transition-ease: ease-in-out !default;
/// Bolt transition timing
$bolt-transition-timing: 200ms !default;

// Effects
/// Bolt translate none effect
$bolt-translate-none: translate3d(0, 0, 0) !default;
/// Bolt translate raised small effect
$bolt-translate-raised--small: translate3d(0, -1px, 0) !default;
/// Bolt translate raised medium effect
$bolt-translate-raised--medium: translate3d(0, -0.125rem, 0) !default;
/// Bolt translate raised large effect
$bolt-translate-raised--large: translate3d(0, -0.25rem, 0) !default;


// Global theming defaults -- TODO: move to standalone setting
/// Bolt default global link hover opacity
$bolt-global-link-hover-opacity: bolt-opacity(80) !default;
/// Bolt default global link active opacity
$bolt-global-link-active-opacity: bolt-opacity(60) !default;

/// Bolt default global border opacity
$bolt-global-border-opacity: bolt-opacity(20) !default;
/// Bolt default global border color
$bolt-global-border-color: bolt-color(gray) !default;

/// Bolt default global button hover mix %
$bolt-global-button-hover-mix: 15% !default;
/// Bolt default global button hover color
$bolt-global-button-hover-color: bolt-color(white) !default;
/// Bolt default global button active mix %
$bolt-global-button-active-mix: 25% !default;
/// Bolt default global button active color
$bolt-global-button-active-color: bolt-color(black) !default;


/* ------------------------------------ *\
   All block elements
\* ------------------------------------ */

/// Bolt's definition of block level elements.
$bolt-block-elements-list: 'p',
  'pre',
  'blockquote',
  'table',
  'ol',
  'ul',
  'dl',
  'fieldset',
  'legend',
  'details',
  'summary',
  'hr',
  'address' !default;

$bolt-unquoted-block-elements-list: ();

@each $bolt-block-element-type in $bolt-block-elements-list {
  $bolt-unquoted-block-elements-list: append($bolt-unquoted-block-elements-list, unquote($bolt-block-element-type), comma);
}

/// Bolt's definition of all unquoted block level elements.
$bolt-all-block-elements: $bolt-unquoted-block-elements-list;


/* ------------------------------------ *\
   All heading elements
\* ------------------------------------ */

/// Bolt's definition of heading elements.
$bolt-heading-elements-list: 'h1',
  'h2',
  'h3',
  'h4',
  'h5',
  'h6' !default;

$bolt-unquoted-heading-elements-list: ();

@each $bolt-heading-element-type in $bolt-heading-elements-list {
  $bolt-unquoted-heading-elements-list: append($bolt-unquoted-heading-elements-list, unquote($bolt-heading-element-type), comma);
}

/// Bolt's definition of all unquoted heading elements.
$bolt-all-heading-elements: $bolt-unquoted-heading-elements-list;


/* ------------------------------------ *\
   Custom Element Global Settings
   used to collection names of custom
   elements.
\* ------------------------------------ */

/// Quoted custom block elements used to globally collect group generic styles. Elements registered via @mixin bolt-register-element.
/// @see {mixin} bolt-register-element
$_bolt-custom-block-elements: ();
/// Quoted custom inline elements used to globally collect group generic styles. Elements registered via @mixin bolt-register-element.
/// @see {mixin} bolt-register-element
$_bolt-custom-inline-elements: ();
/// Quoted custom inline-block elements used to globally collect group generic styles. Elements registered via @mixin bolt-register-element.
/// @see {mixin} bolt-register-element
$_bolt-custom-inline-block-elements: ();

// Equivalent custom elements from above without the quotes -- perfect for using as a group CSS selector.
/// All (unquoted) custom block elements used to globally collect group generic styles
$bolt-all-custom-block-elements: ();
/// All (unquoted) custom inline-block elements used to globally collect group generic styles
$bolt-all-custom-inline-block-elements: ();
/// All (unquoted) custom inline elements used to globally collect group generic styles
$bolt-all-custom-inline-elements: ();


/// Register Element helper mixin: registers any custom elements getting included (used outside selector or declaration)
/// @param {string} $element - The custom element to register
/// @param {string} $element-type - Three different types available: inline, inline-block (which may be rendered as inline-flex), and block
/// @example scss - Utility Mixin
///   @include bolt-register-element('bolt-ordered-list', 'block');
@mixin bolt-register-element($element, $element-type) {
  @if ($element-type != 'inline' and $element-type != 'inline-block' and $element-type != 'block'){
    @error 'Please register your #{$element} element as either an inline, inline-block or block.';
  }

  // @TODO: find a way to dynamically assign the right list to this
  @if ($element-type == 'inline') {
    $_bolt-custom-inline-elements: append($_bolt-custom-inline-elements, $element) !global;

  } @else if  ( $element-type == 'block') {
    $_bolt-custom-block-elements: append($_bolt-custom-block-elements, $element) !global;
  } @else if  ( $element-type == 'inline-block') {
    $_bolt-custom-inline-block-elements: append($_bolt-custom-inline-block-elements, $element) !global;
  }
}
